#!/usr/bin/env ruby
#
# Dump - a Burp plugin Use dump HTTP(S) request/responses to a filesystem.
#
# Copyright (c) 2017, Richard Springs <richard.springs[at]stratumsecurity.com>
# All rights reserved.
#
# Significantly borrowed Java Swing/GridBag code from the dradis/burp-dradis.rb plugin, by Daniel Martin <etd[at]nomejortu.com>
#
# Licensed under GPLv2. See LICENSE.txt for full licensing information.
#

require 'date'
require 'fileutils'
require 'java'
require 'json'
require 'uri'

java_import 'java.awt.event.ActionListener'
java_import 'java.awt.BorderLayout'
java_import 'java.awt.Color'
java_import 'java.awt.Desktop'
java_import 'java.awt.FileDialog'
java_import 'java.awt.GridBagConstraints'
java_import 'java.awt.GridBagLayout'
java_import 'java.awt.Toolkit'
java_import 'java.awt.datatransfer.StringSelection'
java_import 'javax.swing.BorderFactory'
java_import 'javax.swing.Box'
java_import 'javax.swing.ButtonGroup'
java_import 'javax.swing.GroupLayout'
java_import 'javax.swing.JCheckBox'
java_import 'javax.swing.JEditorPane'
java_import 'javax.swing.JFileChooser'
java_import 'javax.swing.JMenuItem'
java_import 'javax.swing.JOptionPane'
java_import 'javax.swing.JPanel'
java_import 'javax.swing.JRadioButton'
java_import 'javax.swing.JSeparator'
java_import 'javax.swing.SwingConstants'
java_import 'burp.IBurpExtender'
java_import 'burp.IExtensionHelpers'
java_import 'burp.ITab'


class BurpExtender
    include IBurpExtender, ITab

    module META
        NAME        = 'Dump'
        TAB_CAPTION = 'Dump'
        VERSION     = '0.0.7'
    end

    def registerExtenderCallbacks(callbacks)
        @callbacks = callbacks

        # set our extension name
        callbacks.setExtensionName(META::NAME)

        # obtain a reference to the helpers
        @helpers = callbacks.getHelpers()

        # obtain our output and error streams
        @stdout = java.io.PrintWriter.new(callbacks.getStdout(), true)
        @stderr = java.io.PrintWriter.new(callbacks.getStderr(), true)

        @stdout.println "Loading #{META::NAME} (v#{META::VERSION})..."

        # Add a configuration tab
        callbacks.addSuiteTab(self)

        # Restore settings
        default_settings()
    end

    def getTabCaption
        META::TAB_CAPTION
    end

    def getUiComponent
        @tab ||= build_config_panel()
    end

    private

    def build_config_panel
        panel        = javax.swing.JPanel.new
        layout       = java.awt.GridBagLayout.new
        constraints  = java.awt.GridBagConstraints.new

        panel.setLayout(layout)
        panel.setBorder( BorderFactory.createEtchedBorder() )

        label_title            = javax.swing.JLabel.new('<html><h3>Dump</h3></html>')
        label_title.foreground = java.awt.Color.new(209,122,33)

        label_description = javax.swing.JLabel.new('Use this plugin to dump HTTP(S) request/responses to a filesystem.')
        label_edition = javax.swing.JLabel.new('Format:')

        @radio_burp_text_logfile = javax.swing.JRadioButton.new('')
        @radio_burp_text_logfile.addActionListener { clear_output_location() }
        @radio_burp_text_logfile.selected = true

        @radio_webscarab_logfile = javax.swing.JRadioButton.new('')
        @radio_webscarab_logfile.addActionListener { clear_output_location() }

        @logfile_type_group = javax.swing.ButtonGroup.new()
        @logfile_type_group.add(@radio_burp_text_logfile)
        @logfile_type_group.add(@radio_webscarab_logfile)

        editor_burp_text_logfile            = javax.swing.JEditorPane.new(
           'text/html',
           'Burp'
           )
        editor_burp_text_logfile.editable   = false
        editor_burp_text_logfile.opaque     = false
        editor_burp_text_logfile.background = java.awt.Color.new(0,0,0,0)
        editor_burp_text_logfile.setToolTipText('Generates a single text file, containing all requests and responses.  Format is very similar as the option generated under Project Options, Misc, Logging.')

        editor_webscarab_logfile            = javax.swing.JEditorPane.new(
          'text/html',
          'WebScarab'
          )
        editor_webscarab_logfile.editable   = false
        editor_webscarab_logfile.opaque     = false
        editor_webscarab_logfile.background = java.awt.Color.new(0,0,0,0)
        editor_webscarab_logfile.setToolTipText('Generates a series of text files, where each request and response is saved into a separate file. Format is similar to the logging output generated by OWASP WebScarab.')

        @field_host_filter = javax.swing.JTextField.new()
        label_host_filter  = javax.swing.JLabel.new('Host Filter:')
        label_host_filter.setLabelFor(@field_host_filter)
        label_host_filter.setToolTipText('Use * to log requests and responses for all hostnames.  Enter a single hostname or list of hostnames separated by commas to filter on specific hosts.  This filter does NOT use regular expressions.')

        @field_burp_comment_header = javax.swing.JTextField.new()
        @field_burp_comment_header.enabled = false
        @label_burp_comment_header = javax.swing.JLabel.new('Burp Comment Header:')
        @label_burp_comment_header.setLabelFor(@field_burp_comment_header)
        @label_burp_comment_header.setToolTipText('Custom HTTP Header to insert Burp comments into request and responses.')

        @field_context_separator = javax.swing.JTextField.new()
        @field_context_separator.enabled = false
        @label_context_separator = javax.swing.JLabel.new('Context Separator:')
        @label_context_separator.setLabelFor(@field_context_separator)
        @label_context_separator.setToolTipText('Burp comments matching the specified string update the context, which is included in all Burp Comment Header instances in addition to the current comment')

        @field_output_location = javax.swing.JTextField.new()
        label_output_location  = javax.swing.JLabel.new('Output Location:')
        label_output_location.setLabelFor(@field_output_location)
        label_output_location.setToolTipText('Specify location for output')

        button_open = javax.swing.JButton.new('Open')
        button_open.add_action_listener { open_output_location }

        button_dump = javax.swing.JButton.new('Dump')
        button_dump.add_action_listener { dump }

        @label_status = javax.swing.JLabel.new('')

        vertical_glue = Box.createVerticalGlue()

        constraints.anchor     = java.awt.GridBagConstraints::NORTH
        constraints.fill       = java.awt.GridBagConstraints::BOTH
        constraints.gridx      = 0
        constraints.gridy      = 0
        constraints.gridwidth  = 6
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,0,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(label_title, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::NORTH
        constraints.fill       = java.awt.GridBagConstraints::BOTH
        constraints.gridx      = 0
        constraints.gridy      = 1
        constraints.gridwidth  = 6
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(0,10,10,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(label_description, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::EAST
        constraints.fill       = java.awt.GridBagConstraints::VERTICAL
        constraints.gridx      = 0
        constraints.gridy      = 2
        constraints.gridwidth  = 1
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(label_edition, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::NORTH
        constraints.fill       = java.awt.GridBagConstraints::BOTH
        constraints.gridx      = 1
        constraints.gridy      = 2
        constraints.gridwidth  = 1
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,0)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(@radio_burp_text_logfile, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::WEST
        constraints.fill       = java.awt.GridBagConstraints::VERTICAL
        constraints.gridx      = 2
        constraints.gridy      = 2
        constraints.gridwidth  = 1
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,0,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(editor_burp_text_logfile, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::NORTH
        constraints.fill       = java.awt.GridBagConstraints::BOTH
        constraints.gridx      = 3
        constraints.gridy      = 2
        constraints.gridwidth  = 1
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,0)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(@radio_webscarab_logfile, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::WEST
        constraints.fill       = java.awt.GridBagConstraints::VERTICAL
        constraints.gridx      = 4
        constraints.gridy      = 2
        constraints.gridwidth  = 1
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,0,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(editor_webscarab_logfile, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::EAST
        constraints.fill       = java.awt.GridBagConstraints::VERTICAL
        constraints.gridx      = 0
        constraints.gridy      = 3
        constraints.gridwidth  = 1
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(label_host_filter, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::NORTH
        constraints.fill       = java.awt.GridBagConstraints::BOTH
        constraints.gridx      = 1
        constraints.gridy      = 3
        constraints.gridwidth  = 4
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,5)
        constraints.weightx    = 1
        constraints.weighty    = 0
        panel.add(@field_host_filter, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::EAST
        constraints.fill       = java.awt.GridBagConstraints::VERTICAL
        constraints.gridx      = 0
        constraints.gridy      = 4
        constraints.gridwidth  = 1
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(@label_burp_comment_header, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::NORTH
        constraints.fill       = java.awt.GridBagConstraints::BOTH 
        constraints.gridx      = 1
        constraints.gridy      = 4
        constraints.gridwidth  = 4
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(@field_burp_comment_header, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::EAST
        constraints.fill       = java.awt.GridBagConstraints::VERTICAL
        constraints.gridx      = 0
        constraints.gridy      = 5
        constraints.gridwidth  = 1
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(@label_context_separator, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::NORTH
        constraints.fill       = java.awt.GridBagConstraints::BOTH
        constraints.gridx      = 1
        constraints.gridy      = 5
        constraints.gridwidth  = 4
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(@field_context_separator, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::EAST
        constraints.fill       = java.awt.GridBagConstraints::VERTICAL
        constraints.gridx      = 0
        constraints.gridy      = 6
        constraints.gridwidth  = 1
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(label_output_location, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::NORTH
        constraints.fill       = java.awt.GridBagConstraints::BOTH 
        constraints.gridx      = 1
        constraints.gridy      = 6
        constraints.gridwidth  = 4 
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,5,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(@field_output_location, constraints)

        constraints.anchor  = java.awt.GridBagConstraints::WEST
        constraints.fill    = java.awt.GridBagConstraints::VERTICAL
        constraints.gridx   = 5
        constraints.gridy   = 6
        constraints.insets  = java.awt.Insets.new(5,5,5,5)
        constraints.weightx = 0
        constraints.weighty = 0
        panel.add(button_open, constraints)

        constraints.anchor  = java.awt.GridBagConstraints::WEST
        constraints.fill    = java.awt.GridBagConstraints::VERTICAL
        constraints.gridx   = 1
        constraints.gridy   = 8
        constraints.insets  = java.awt.Insets.new(5,10,5,5)
        constraints.weightx = 0
        constraints.weighty = 0
        panel.add(button_dump, constraints)

        constraints.anchor     = java.awt.GridBagConstraints::NORTH
        constraints.fill       = java.awt.GridBagConstraints::BOTH
        constraints.gridx      = 4
        constraints.gridy      = 8
        constraints.gridwidth  = 4
        constraints.gridheight = 1
        constraints.insets     = java.awt.Insets.new(5,10,10,5)
        constraints.weightx    = 0
        constraints.weighty    = 0
        panel.add(@label_status, constraints)

        container = javax.swing.JPanel.new
        container.setLayout(java.awt.BorderLayout.new(5,5))
        container.add(panel, java.awt.BorderLayout::PAGE_START)
        container.add(vertical_glue, java.awt.BorderLayout::LINE_END)
        container
    end

    def open_output_location
        if @radio_burp_text_logfile.selected 
            file_chooser = Java::javax::swing::JFileChooser.new("JRuby panel")
            file_chooser.set_dialog_title("Specify Output Location For Burp Log File")
            success = file_chooser.show_open_dialog(nil)
            if success == Java::javax::swing::JFileChooser::APPROVE_OPTION
                output_location = file_chooser.get_selected_file.get_absolute_path
                if output_location && output_location.length > 0 
                    @field_output_location.text = output_location
                end
            end
        elsif @radio_webscarab_logfile.selected
            file_chooser = Java::javax::swing::JFileChooser.new("JRuby panel")
            file_chooser.set_dialog_title("Specify Output Location For WebScarab Log File Directory")
            file_chooser.setFileSelectionMode(Java::javax::swing::JFileChooser::DIRECTORIES_ONLY)
            success = file_chooser.show_open_dialog(nil)
            if success == Java::javax::swing::JFileChooser::APPROVE_OPTION
                output_location = file_chooser.get_selected_file.get_absolute_path
                if output_location && output_location.length > 0 
                    @field_output_location.text = output_location
                end
            end
        end
    end

    def clear_output_location
        @field_output_location.text           = ''
        @label_status.text                    = ''
    end

    def default_settings
        @field_host_filter.text               = '*'
        @field_output_location.text           = ''
        @field_burp_comment_header.text       = 'X-Burp-Comment:'
        @field_context_separator.text         = '!!!' 

        @field_host_filter.enabled            = true
        @field_output_location.enabled        = true
        @field_burp_comment_header.enabled    = true
        @field_context_separator.enabled      = true
    end

    def does_match_host_filter(current_host)
        host_filter = @field_host_filter.text
        # $host_filter uses wildcard match
        if host_filter == "*"
            return true
        # $host_filter is a list of hosts separated by commas
        elsif ! host_filter.index(',').nil?
            host_filter.split(',').each do |host_in_filter|
                if ! current_host.index(host_in_filter.strip).nil?
                    return true
                end
            end
        # $host_filter is a single host
        elsif ! current_host.index(host_filter.strip).nil?
                return true
        else
        # wom wom
            return false
        end
    end

    def modify_with_comment(text, x_annotated_comment)
        modified_text = ""
        # if body is present, find the index of %0d%0a%0d%0a
        line_return_index = text.index((@line_separator*2))
        if ! line_return_index.nil? and line_return_index > 0
            # insert annotated comment
            modified_text = text[0..(line_return_index - 1)] + @line_separator + x_annotated_comment + text[line_return_index..text.length]
            return modified_text
        else
            # something went wrong
            return text
        end
    end

    def update_with_comment(request, response, comment)
        # detect Context Separator
        if comment and comment.length > 0 and comment.include? @field_context_separator.text
            @last_context = comment
        end 
        # build Burp Comment Header
        x_annotated_comment = "#{@field_burp_comment_header.text} #{comment}  |  #{@last_context}"
        # modify request/response with Burp Comment Header
        request, response = modify_with_comment(request, x_annotated_comment), modify_with_comment(response, x_annotated_comment)
        return request, response
    end

    def write_to_filesystem(request, response)
            File.open(@field_output_location.text + "/" + @counter.to_s + "-request" + @extension, "wb") do |f|
                f.write(request)
            end
            File.open(@field_output_location.text + "/" + @counter.to_s + "-response" + @extension, "wb") do |f|
                f.write(response)
            end
    end

    def append_to_filesystem(request, response, protocol, host, port)
        log_separator = "=" * 54 + @line_separator
        meta_separator = " " * 2
        uri = protocol + "://" + host + ":" + port.to_s
        fake_ipaddress = "[" + host + "]"   # faked, not accessible via Extender API
        fake_time = @fake_timestamp.strftime("%I:%M:%S %p")     # faked, not accessible via Extender API
        header = log_separator + fake_time + meta_separator + uri + meta_separator + fake_ipaddress + @line_separator + log_separator
        log_entry = header + request + @line_separator + log_separator + response + @line_separator + log_separator + @line_separator * 3
        File.open(@field_output_location.text, "ab") do |f|
            f.write(log_entry)
        end
    end

    def dump()
        start_time = Time.now
        @counter = 1
        @line_separator = "\r\n"
        @last_context = ""
        @extension = ".txt"
        @fake_timestamp = Time.new("+12:00") # faked, not accessible via Extender API
        
        # return error message if Host Header Filter is blank, 
        if @field_host_filter.text == ""
            javax.swing.JOptionPane.showMessageDialog(nil, "Please specify a Host Header Filter.")
            return
        end
        # return error message if Output Location is blank
        if @field_output_location.text == ""
            javax.swing.JOptionPane.showMessageDialog(nil, "Please specify an Output Location.")
            return
        end
        # return error message if Output Location exists (Burp)
        if @radio_burp_text_logfile.selected == true && File.exist?(@field_output_location.text)
            javax.swing.JOptionPane.showMessageDialog(nil, "Output File already exists.\nPlease specify a new Output Location")
            return
        end
        # return error message if Output Location contains files (WebScarab)
        if @radio_webscarab_logfile.selected == true
            unsorted_file_list = Dir.entries(@field_output_location.text)
            if ! unsorted_file_list.nil? && unsorted_file_list.length > 2   # ".", ".."" for empty directories
                javax.swing.JOptionPane.showMessageDialog(nil, "Output Directory already contains files.\nPlease specify a new Output Location")
                return
            end
        end

        # iterate through BurpSuite's proxy history
        proxy_history = @callbacks.getProxyHistory()
        if ! proxy_history.nil? && proxy_history.length > 0
            proxy_history.each do |item|
                begin
                    # filter out unwanted requests/responses via host header
                    if item.host && item.host.length > 0 && does_match_host_filter(item.host)
                        request, response = item.request.to_s, item.response.to_s
                    # insert Burp Comment Header into request/response, unless Burp Comment Header is empty
                        if @field_burp_comment_header && @field_burp_comment_header.text.length > 0 
                            comment = item.get_comment.to_s
                            request, response = update_with_comment(request, response, comment)
                        end
                    # write to disk 
                        if @radio_webscarab_logfile.selected == true
                            
                            write_to_filesystem(request, response)
                        elsif @radio_burp_text_logfile.selected == true
                            append_to_filesystem(request, response, item.protocol, item.host, item.port)
                        end
                    end
                rescue IOError => e
                    # javax.swing.JOptionPane.showMessageDialog(nil, "If you can see me, something has gone horribly wrong :(")
                end
                @counter += 1
                @fake_timestamp = @fake_timestamp + 1
            end
        end
        # display message upon completion
        @label_status.text = "Last Dump Completed @ #{Time.now.strftime "%H:%M:%S %d/%M/%Y"} (~ #{Time.now.to_i - start_time.to_i}s)"
    end

end

